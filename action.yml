name: 'Publish Neon Library'
description: 'Publish a Neon library and its prebuilds.'
inputs:
  working-directory:
    description: 'Working directory of the library (for extracting package metadata), relative to repo root.'
    required: false
    default: '.'
  tarball-directory:
    description: 'Directory in which to fetch the tarballs to be published, relative to repo root.'
    required: false
    default: 'dist'
  node-version:
    description: 'Node version to install.'
    required: false
    default: ''
  registry-url:
    description: 'npm registry URL.'
    required: false
    default: ''
  github-release:
    description: 'Filename or glob to fetch from GitHub releases.'
    required: false
    default: ''
  filename:
    description: 'Filename or glob of local tarballs.'
    required: false
    default: ''
branding:
  icon: 'upload'
  color: 'orange'
runs:
  using: "composite"
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs['node-version'] }}
        registry-url: ${{ inputs['registry-url'] }}
        cache: npm
    - name: Get Tag Name
      uses: olegtarasov/get-tag@v2.1.2
      id: tagName
    - name: Fetch Packages
      if: ${{ inputs['github-release'] }}
      uses: robinraju/release-downloader@v1.7
      with:
        tag: ${{ steps.tagName.outputs.tag }}
        fileName: ${{ inputs['github-release'] }}
        out-file-path: ${{ inputs['tarball-directory'] }}
    - name: Get Package Metadata
      id: package
      shell: bash
      run: |
        echo "version=$(cat package.json | jq -r .version)" > $GITHUB_OUTPUT
        echo "name=$(cat package.json | jq -r .name)" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs['working-directory'] }}
    - name: Publish
      shell: bash
      run: |
        pwd
        ls
        for p in ${{ steps.package.outputs.name }}-*-${{ steps.package.outputs.version }}.tgz; do
          npm publish --access public $p
        done
        npm publish ${{ steps.package.outputs.name }}-${{ steps.package.outputs.version }}.tgz
      working-directory: ${{ inputs['tarball-directory'] }}
